# -*- coding: utf-8 -*-
"""
Created on Wed Sep 14 21:01:54 2022

@author: marcnetts
"""

from linear_algebra import dot
import matplotlib.pyplot as plt

BIAS = -1
THRESHOLD = 0
TAXA_APRENDIZAGEM = 0.3

PAIS_DESENVOLVIDO = 1
PAIS_SUBDESENVOLVIDO = 0

def degrau(x):
    return 1 if x >= THRESHOLD else 0 # 0 é o limial

def saida_perceptron(pesos, entradas):
        y = dot(pesos, entradas)
        return degrau(y)

def ajustes(sinapses, entradas, saida):
    saida_parcial = saida_perceptron(sinapses, entradas)
    
    for j in range(len(sinapses)):
        erro = saida - saida_parcial
        sinapses[j] = sinapses[j] + TAXA_APRENDIZAGEM * erro * entradas[j]
        
    saida = saida_parcial
    return sinapses, saida

def teste_generalizacao(sinapses, entradas):
    saida_parcial = saida_perceptron(sinapses, entradas)
    return sinapses, saida_parcial

neuronio = [0.22, 0.33, -0.44]

padroes = [
    [BIAS, 0.005250819, 0.019197208, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.003661611, 0.268760908, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.007314035, 0.72600349, PAIS_DESENVOLVIDO],
    [BIAS, 0.005539265, 0.303664921, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.031629848, 0.60034904, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.171461852, 0.732984293, PAIS_DESENVOLVIDO],
    [BIAS, 0.004008848, 0.02617801, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.452503785, 0.645724258, PAIS_SUBDESENVOLVIDO],
    [BIAS, 1, 0.937172775, PAIS_DESENVOLVIDO],
    [BIAS, 0.005131399, 0.139616056, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.3738701, 0.935427574, PAIS_DESENVOLVIDO],
    [BIAS, 0.006806958, 0.116928447, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.000584241, 0.530541012, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.057700222, 0.832460733, PAIS_DESENVOLVIDO],
    [BIAS, 0.000224143, 0.659685864, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.010060702, 0.221640489, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.002028308, 0.767888307, PAIS_DESENVOLVIDO],
    [BIAS, 0.0623668, 0.816753927, PAIS_DESENVOLVIDO],
    [BIAS, 0.025364875, 0.434554974, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.003167394, 0.296684119, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.033007775, 0.804537522, PAIS_DESENVOLVIDO],
    [BIAS, 0.001115202, 0.164048866, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.771447889, 0.97382199, PAIS_DESENVOLVIDO],
    [BIAS, 0.001315461, 0.492146597, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.058251393, 0.926701571, PAIS_DESENVOLVIDO],
    [BIAS, 0.000575055, 0.169284468, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.003531167, 0.916230366, PAIS_DESENVOLVIDO],
    [BIAS, 0.016344048, 0.588132635, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.000951688, 0.701570681, PAIS_DESENVOLVIDO],
    [BIAS, 0.001589209, 0.623036649, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.003332745, 0.996509599, PAIS_DESENVOLVIDO],
    [BIAS, 0.004350574, 0.663176265, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.00029212, 0.708551483, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.095161456, 0.970331588, PAIS_DESENVOLVIDO],
    [BIAS, 0.000459309, 0.588132635, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.025291386, 0.612565445, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.326101974, 0.844677138, PAIS_DESENVOLVIDO],
    [BIAS, 0.006608537, 0.712041885, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.326653145, 0.895287958, PAIS_DESENVOLVIDO],
    [BIAS, 0.00121625, 0.235602094, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.00011942, 0.406631763, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.007565736, 0.071553229, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.028194218, 0.72600349, PAIS_DESENVOLVIDO],
    [BIAS, 0.001150109, 0.584642234, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.001578185, 0.612565445, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.015373988, 0.537521815, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.401612358, 0.780104712, PAIS_DESENVOLVIDO],
    [BIAS, 0.070101562, 0.539267016, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.16115496, 0.565445026, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.02984773, 0.282722513, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0, 0.441535777, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.006215368, 0.77486911, PAIS_DESENVOLVIDO],
    [BIAS, 0.000202096, 0.568935428, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.081014742, 0.919720768, PAIS_DESENVOLVIDO],
    [BIAS, 0.008499052, 0.410122164, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.034716404, 0.959860384, PAIS_DESENVOLVIDO],
    [BIAS, 0.070028073, 1, PAIS_DESENVOLVIDO],
    [BIAS, 0.524707145, 0.893542757, PAIS_DESENVOLVIDO],
    [BIAS, 0.53738407, 0.938917976, PAIS_DESENVOLVIDO],
    [BIAS, 0.006680189, 0.467713787, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.054852507, 0.511343805, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.115738495, 0.607329843, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.096098446, 0.994764398, PAIS_DESENVOLVIDO],
    [BIAS, 0.019118274, 0.72425829, PAIS_DESENVOLVIDO],
    [BIAS, 0.007991975, 0.626527051, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.227074974, 0.72600349, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.00366896, 0, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.09721916, 0.945898778, PAIS_DESENVOLVIDO],
    [BIAS, 0.016443259, 0.335078534, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.000237003, 0.312390925, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.054981113, 0.872600349, PAIS_DESENVOLVIDO],
    [BIAS, 0.06789688, 0.678883072, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.000615474, 0.036649215, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.097017064, 0.965095986, PAIS_DESENVOLVIDO],
    [BIAS, 0.016206255, 0.593368237, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.011403722, 0.938917976, PAIS_DESENVOLVIDO],
    [BIAS, 0.001719653, 0.188481675, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.140945368, 0.595113438, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.0349185, 0.769633508, PAIS_DESENVOLVIDO],
    [BIAS, 0.002375546, 0.260034904, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.009057572, 0.387434555, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.064902186, 0.972076789, PAIS_DESENVOLVIDO],
    [BIAS, 0.016327513, 0.60034904, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.130730338, 0.645724258, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.052868292, 0.979057592, PAIS_DESENVOLVIDO],
    [BIAS, 0.000101048, 0.626527051, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.014352485, 0.759162304, PAIS_DESENVOLVIDO],
    [BIAS, 0.001260344, 0.607329843, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.083054074, 0.813263525, PAIS_DESENVOLVIDO],
    [BIAS, 0.035561533, 0.356020942, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.01454172, 0.380453752, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.169404148, 0.792321117, PAIS_DESENVOLVIDO],
    [BIAS, 0.004780487, 0.570680628, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.425680145, 0.877835951, PAIS_DESENVOLVIDO],
    [BIAS, 0.036847598, 0.195462478, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.018750827, 0.818499127, PAIS_DESENVOLVIDO],
    [BIAS, 0.006727957, 0.565445026, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.001014154, 0.20069808, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.031776827, 0.659685864, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.229279657, 0.979057592, PAIS_DESENVOLVIDO],
    [BIAS, 0.005783618, 0.371727749, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.011789541, 0.366492147, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.019412232, 0.729493892, PAIS_DESENVOLVIDO],
    [BIAS, 0.012656716, 0.321116928, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.008228978, 0.689354276, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.169826712, 0.965095986, PAIS_DESENVOLVIDO],
    [BIAS, 0.000687126, 0.481675393, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.012, 0.623, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.3, 0.8, PAIS_DESENVOLVIDO],
    [BIAS, 0.56, 0.683, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.4, 0.81, PAIS_DESENVOLVIDO],
    [BIAS, 0.12, 0.682, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.7, 0.801, PAIS_DESENVOLVIDO],
    [BIAS, 0.71, 0.69, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.8, 0.82, PAIS_DESENVOLVIDO],
    [BIAS, 0.5, 0.7, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.3, 0.83, PAIS_DESENVOLVIDO],
    [BIAS, 0.2, 0.71, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.331, 0.802, PAIS_DESENVOLVIDO],
    [BIAS, 0.8, 0.62, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.52, 0.801, PAIS_DESENVOLVIDO],
    [BIAS, 0.62, 0.617, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.18, 0.8, PAIS_DESENVOLVIDO],
    [BIAS, 0.6, 0.723, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.8, 0.79, PAIS_DESENVOLVIDO],
    [BIAS, 0.3, 0.647, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.63, 0.81, PAIS_DESENVOLVIDO],
    [BIAS, 0.433, 0.61, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.9, 0.86, PAIS_DESENVOLVIDO],
    [BIAS, 0.753, 0.604, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.84, 0.8763, PAIS_DESENVOLVIDO],
    [BIAS, 0.379, 0.628, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.9076, 0.842, PAIS_DESENVOLVIDO],
]

#55 ciclos de treinamento
for n in range(55):
    print("Ciclo " + str(n+1))
    for i in range(len(padroes)):
        neuronio, saida_1 = ajustes(neuronio, padroes[i][:-1], padroes[i][2])
        print(neuronio, "saida" + str(padroes[i][-1]) + " = ", saida_1)

### Plotting
plt.title("Separação de classes com Perceptron")
plt.xlabel("PIB")
plt.ylabel("IDH")

for padrao in padroes:
    print(str(padrao[1]) + " " + str(padrao[2]))
    corEsperada = "purple" if padrao[3] == 0 else "blue"
    plt.scatter(padrao[1], padrao[2], c=corEsperada)

### Testes
print("Testes de generalização")

saida = [0]

padroes_testes = [
    [BIAS, 0.11928436, 0.511343805, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.087922748, 0.746945899, PAIS_DESENVOLVIDO],
    [BIAS, 0.035451299, 0.602094241, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.000604451, 0.806282723, PAIS_DESENVOLVIDO],
    [BIAS, 0.016378956, 0.240837696, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.32591825, 0.95113438, PAIS_DESENVOLVIDO],
    [BIAS, 0.597094228, 0.563699825, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.024611608, 0.429319372, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.088271823, 0.982547993, PAIS_DESENVOLVIDO],
    [BIAS, 0.000134118, 0.387434555, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.596726781, 0.64921466, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.205946764, 0.260034904, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.737826477, 0.77486911, PAIS_DESENVOLVIDO],
    [BIAS, 0.004879698, 0.431064572, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.002114658, 0.155322862, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.053217367, 0.760907504, PAIS_DESENVOLVIDO],
    [BIAS, 0.004657392, 0.240837696, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.044986551, 0.963350785, PAIS_DESENVOLVIDO],
    [BIAS, 0.000235166, 0.307155323, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.009230272, 0.333333333, PAIS_SUBDESENVOLVIDO],
    [BIAS, 4.04192E-05, 0.67539267, PAIS_DESENVOLVIDO],
    [BIAS, 0.011378, 0.553228621, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.053198995, 0.808027923, PAIS_DESENVOLVIDO],
    [BIAS, 0.0790489, 0.656195462, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.194923351, 0.27399651, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.015414407, 0.7504363, PAIS_DESENVOLVIDO],
    [BIAS, 0.012752252, 0.169284468, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.032585211, 0.216404887, PAIS_SUBDESENVOLVIDO],
    [BIAS, 0.016797845, 0.860383944, PAIS_DESENVOLVIDO],
    [BIAS, 0.004526949, 0.261780105, PAIS_SUBDESENVOLVIDO],
]

### Plotting
plt.title("Separação de classes com Perceptron")
plt.xlabel("IDH")
plt.ylabel("PIB")

slope = -(neuronio[0]/neuronio[2])/(neuronio[0]/neuronio[1])  
intercept = neuronio[0]/neuronio[2]
for x in range(0,100):
    #y =mx+c, m is slope and c is intercept
    y = (slope*(x/100)) + intercept
    plt.plot(x/100, y,'ko')

print("testes:")
for teste in padroes_testes:
    neuronio, saida = teste_generalizacao(neuronio, teste[:-1])
    print(neuronio, teste, "saida = ", saida)
    corEsperada = "green" if saida == teste[-1] else "red"
    plt.scatter(teste[1], teste[2], c=corEsperada)

"""
generalizations = [
[BIAS, 0.012, 0.7, PAIS_SUBDESENVOLVIDO],
[BIAS, 0.3, 0.8, PAIS_DESENVOLVIDO],
[BIAS, 0.56, 0.723, PAIS_SUBDESENVOLVIDO],
[BIAS, 0.4, 0.81, PAIS_DESENVOLVIDO],
[BIAS, 0.12, 0.71, PAIS_SUBDESENVOLVIDO],
[BIAS, 0.7, 0.801, PAIS_DESENVOLVIDO],
[BIAS, 0.71, 0.72, PAIS_SUBDESENVOLVIDO],
[BIAS, 0.8, 0.91, PAIS_DESENVOLVIDO],
[BIAS, 0.5, 0.74, PAIS_SUBDESENVOLVIDO],
[BIAS, 0.3, 0.83, PAIS_DESENVOLVIDO],
[BIAS, 0.2, 0.73, PAIS_SUBDESENVOLVIDO],
[BIAS, 0.331, 0.802, PAIS_DESENVOLVIDO],
[BIAS, 0.8, 0.61, PAIS_SUBDESENVOLVIDO],
[BIAS, 0.52, 0.801, PAIS_DESENVOLVIDO],
[BIAS, 0.62, 0.62, PAIS_SUBDESENVOLVIDO],
[BIAS, 0.1, 0.8, PAIS_DESENVOLVIDO],
[BIAS, 0.6, 0.4, PAIS_SUBDESENVOLVIDO],
[BIAS, 0.8, 0.81, PAIS_DESENVOLVIDO],
]

for teste in generalizations:
    corEsperada = "orange" if teste[-1] == 1 else "pink"
    plt.scatter(teste[1], teste[2], c=corEsperada)
"""

print("done")